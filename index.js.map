{"version":3,"file":"index.js","sources":["../src/js/render-functions.js","../src/js/pixabay-api.js","../src/main.js"],"sourcesContent":["import SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst gallery = document.querySelector('.gallery');\nconst loader = document.querySelector('.loader');\n\nconst lightbox = new SimpleLightbox('.gallery a', {\n  captionsData: 'alt',\n  captionDelay: 250,\n});\n\nexport function createGallery(images) {\n  const markup = images.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => `<li class=\"gallery-item\">\n\t<a class=\"gallery-link\" href=\"${largeImageURL}\">\n\t\t<img\n\t\t  class=\"gallery-image\"\n\t\t  src=\"${webformatURL }\"\n\t\t  alt=\"${tags}\"\n\t\t/>\n\t</a>\n   <div class=\"image-info\">\n        <div class=\"info-item\">\n            <p class=\"info-label\">Likes</p>\n            <p class=\"info-value\">${likes}</p>\n        </div>\n        <div class=\"info-item\">\n            <p class=\"info-label\">Views</p>\n            <p class=\"info-value\">${views}</p>\n        </div>\n        <div class=\"info-item\">\n            <p class=\"info-label\">Comments</p>\n            <p class=\"info-value\">${comments}</p>\n        </div>\n        <div class=\"info-item\">\n            <p class=\"info-label\">Downloads</p>\n            <p class=\"info-value\">${downloads}</p>\n        </div>\n    </div>\n</li>`).join('');\n\n  gallery.insertAdjacentHTML('beforeend', markup);\n  lightbox.refresh();\n}\n\nexport function clearGallery() {\n  gallery.innerHTML = '';\n}\n\nexport function showLoader() {\n  loader.classList.add('visible');\n}\n\nexport function hideLoader() {\n  loader.classList.remove('visible');\n}","import axios from 'axios';\n\nconst API_KEY = '51602245-fcbe599c3dab331c74561bb82';\n\nexport async function getImagesByQuery(query) {\n  const response = await axios('https://pixabay.com/api/', {\n    params: {\n      key: API_KEY,\n      q: query,\n      image_type: \"photo\",\n      orientation: \"horizontal\",\n      safesearch: true,\n    },\n  });\n  return response.data;\n}\n// export  function getImagesByQuery(query) {\n//   return axios('https://pixabay.com/api/', {\n//     params: {\n//       key: API_KEY,\n//       q: query,\n//       image_type: \"photo\",\n//       orientation: \"horizontal\",\n//       safesearch: true,\n//     },\n//   });\n  \n//}","import iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\nimport { createGallery, clearGallery, showLoader, hideLoader } from './js/render-functions';\nimport { getImagesByQuery } from './js/pixabay-api';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', async event => {\nevent.preventDefault();\nconst query = event.target.elements['search-text'].value.trim();\nif (query === '') {\n    iziToast.warning({\n      icon: 'ico-error',\n      message: 'Поле пошуку не може бути порожнім.',\n      position: 'topRight',\n    });\n    return;\n    }\n\n   clearGallery();\n   showLoader();\n    \n    const data = await getImagesByQuery(query);\n    const images = data.hits;\n\n    if (images.length === 0) {\n      iziToast.info({\n        icon: 'ico-error',\n        message: 'Sorry, there are no images matching your search query. Please try again!',\n        position: 'topRight',\n      });\n    } else {\n      createGallery(images);\n    }\n    hideLoader();\n  });\n\n\n\n// const form = document.querySelector('.form');\n// form.addEventListener('submit', event => {\n// event.preventDefault(); \n// const query = event.target.elements['search-text'].value.trim();\n// if (query === '') {\n//     iziToast.warning({\n//       icon: 'ico-error',\n//       message: 'Поле пошуку не може бути порожнім.',\n//       position: 'topRight',\n//     });\n//     return;\n//     }\n\n//     clearGallery();\n//     showLoader();\n    \n//     getImagesByQuery(query).then(response => {\n//     if (response.data.hits.length === 0) {\n//         iziToast.info({\n//           icon: 'ico-error',\n//           message: 'Sorry, there are no images matching your search query. Please try again!',\n//           position: 'topRight',\n//         });\n//     } else {\n//         createGallery(response.data.hits);\n//     }}).catch(error => {\n//     iziToast.error({\n//       icon: 'ico-error',\n//       message: 'Помилка сервера. Спробуйте ще раз.',\n//       position: 'topRight',\n//     });\n//     }).finally(() => {\n//     hideLoader();\n//     form.reset();\n//     });\n    \n//   });"],"names":["gallery","loader","lightbox","SimpleLightbox","createGallery","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","clearGallery","showLoader","hideLoader","API_KEY","getImagesByQuery","query","axios","form","event","iziToast"],"mappings":"owBAGA,MAAMA,EAAU,SAAS,cAAc,UAAU,EAC3CC,EAAS,SAAS,cAAc,SAAS,EAEzCC,EAAW,IAAIC,EAAe,aAAc,CAChD,aAAc,MACd,aAAc,GAChB,CAAC,EAEM,SAASC,EAAcC,EAAQ,CACpC,MAAMC,EAASD,EAAO,IAAI,CAAC,CAAE,aAAAE,EAAc,cAAAC,EAAe,KAAAC,EAAM,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,UAAAC,CAAW,IAAK;AAAA,iCACzEL,CAAa;AAAA;AAAA;AAAA,WAGnCD,CAAc;AAAA,WACdE,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAMqBC,CAAK;AAAA;AAAA;AAAA;AAAA,oCAILC,CAAK;AAAA;AAAA;AAAA;AAAA,oCAILC,CAAQ;AAAA;AAAA;AAAA;AAAA,oCAIRC,CAAS;AAAA;AAAA;AAAA,MAGvC,EAAE,KAAK,EAAE,EAEbb,EAAQ,mBAAmB,YAAaM,CAAM,EAC9CJ,EAAS,QAAO,CAClB,CAEO,SAASY,GAAe,CAC7Bd,EAAQ,UAAY,EACtB,CAEO,SAASe,GAAa,CAC3Bd,EAAO,UAAU,IAAI,SAAS,CAChC,CAEO,SAASe,GAAa,CAC3Bf,EAAO,UAAU,OAAO,SAAS,CACnC,CCpDA,MAAMgB,EAAU,qCAET,eAAeC,EAAiBC,EAAO,CAU5C,OATiB,MAAMC,EAAM,2BAA4B,CACvD,OAAQ,CACN,IAAKH,EACL,EAAGE,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACb,CACL,CAAG,GACe,IAClB,CCVA,MAAME,EAAO,SAAS,cAAc,OAAO,EAC3CA,EAAK,iBAAiB,SAAU,MAAMC,GAAS,CAC/CA,EAAM,eAAc,EACpB,MAAMH,EAAQG,EAAM,OAAO,SAAS,aAAa,EAAE,MAAM,OACzD,GAAIH,IAAU,GAAI,CACdI,EAAS,QAAQ,CACf,KAAM,YACN,QAAS,qCACT,SAAU,UAChB,CAAK,EACD,MACC,CAEFT,IACAC,IAGC,MAAMV,GADO,MAAMa,EAAiBC,CAAK,GACrB,KAEhBd,EAAO,SAAW,EACpBkB,EAAS,KAAK,CACZ,KAAM,YACN,QAAS,2EACT,SAAU,UAClB,CAAO,EAEDnB,EAAcC,CAAM,EAEtBW,GACJ,CAAG"}